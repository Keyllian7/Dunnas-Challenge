<% if user_signed_in? && current_user.admin? %>
  <div class="max-w-3xl mx-auto bg-gray-800 text-white p-6 rounded-lg shadow-lg mt-6">
    <h1 class="text-3xl font-bold mb-6">Register new user</h1>

    <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
      <%= render "devise/shared/error_messages", resource: resource %>

      <div class="field mb-4">
        <%= f.label :email, class: "block text-white text-lg font-medium" %><br />
        <%= f.email_field :email, autofocus: true, autocomplete: "email", class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none " %>
      </div>

      <div class="field mb-4">
        <%= f.label :password, class: "block text-white text-lg font-medium" %>
        <% if @minimum_password_length %>
        <em>(<%= @minimum_password_length %> characters minimum)</em>
        <% end %><br />
        <%= f.password_field :password, autocomplete: "new-password", class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none " %>
      </div>

      <div class="field mb-4">
        <%= f.label :password_confirmation, class: "block text-white text-lg font-medium" %><br />
        <%= f.password_field :password_confirmation, autocomplete: "new-password", class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none " %>
      </div>

      <div class="field mb-4">
        <%= f.label :photo, class: "block text-white text-lg font-medium" %><br />
        <%= f.file_field :photo, class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none " %>
      </div>

      <div class="field mb-4">
        <%= f.label :name, class: "block text-white text-lg font-medium" %><br />
        <%= f.text_field :name, class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none " %>
      </div>

      <div class="field mb-4">
        <%= f.label :cpf, class: "block text-white text-lg font-medium" %><br />
        <%= f.text_field :cpf, class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none ", oninput: "this.value = this.value.replace(/[^0-9]/g, '')" %>
      </div>

      <div class="field mb-4">
        <%= f.label :rg, class: "block text-white text-lg font-medium" %><br />
        <%= f.text_field :rg, class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none ", oninput: "this.value = this.value.replace(/[^0-9]/g, '')" %>
      </div>

      <div class="field mb-4">
        <%= f.label :telephone, class: "block text-white text-lg font-medium" %><br />
        <%= f.telephone_field :telephone, class: "w-full p-2 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none ", oninput: "this.value = this.value.replace(/[^0-9]/g, '')" %>
      </div>

    <div class="field mb-4 flex items-center space-x-4 justify-between">
      <div class="field mb-4">
        <%= f.label :role, class: "block text-white text-lg font-medium" %><br />
        <%= f.select :role, User.roles.keys.map { |s| [s.humanize, s] }, { selected: "admin" },
        { id: "user_role", class: "w-full p-3 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" } %>
      </div>

      <div id="unit_field" class="field mb-4" style="display: none;">
        <%= f.label :unit_id, class: "block text-white text-lg font-medium" %><br />
        <%= f.select :unit_id, [[nil, "Select a unit"]] + Unit.all.map { |u| [u.name, u.id] }, {}, 
        { id: "user_unit_id", class: "w-full p-3 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" } %>
      </div>

      <div id="sector_field" class="field mb-4" style="display: none;">
        <%= f.label :sector_id, class: "block text-white text-lg font-medium" %><br />
        <%= f.select :sector_id, [[nil, "Select a sector"]] + Sector.all.map { |s| [s.name, s.id] }, {}, 
        { id: "user_sector_id", class: "w-full p-3 rounded-lg bg-gray-800 text-white border border-gray-600 focus:ring-2 focus:ring-blue-500 focus:outline-none" } %>
      </div>
    </div>

      <div class="actions">
        <%= f.submit "Sign up", class: "w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition" %>
      </div>
    <% end %>

    <%= render "devise/shared/links" %>
  </div>
<% else %>
  <div class="max-w-3xl mx-auto bg-gray-800 text-white p-6 rounded-lg shadow-lg mt-6">
    <h1 class="text-3xl font-bold mb-6">You are not authorized to access this page</h1>
  </div>
<% end %>

<script>

document.addEventListener("turbo:load", function () {
  const roleSelect = document.getElementById("user_role");
  const unitField = document.getElementById("unit_field");
  const sectorField = document.getElementById("sector_field");
  const unitSelect = document.getElementById("user_unit_id");
  const sectorSelect = document.getElementById("user_sector_id");

  function toggleFields() {
  const role = roleSelect.value;

  unitField.style.display = "none";
  sectorField.style.display = "none";

  if (role === "attendant") {
    unitField.style.display = "block";
  } else if (role === "employee") {
    unitField.style.display = "block";

    if (unitSelect.value) {
      sectorField.style.display = "block"; 
      loadSectors(unitSelect.value);
      }
    }
  }

  function loadSectors(unitId) {
    fetch(`/units/${unitId}/sectors`)
      .then(response => response.json())
      .then(sectors => {
        sectorSelect.innerHTML = "<option value=''>Select a sector</option>";
        sectors.forEach(sector => {
        const option = document.createElement("option");
        option.value = sector.id;
        option.textContent = sector.name;
        sectorSelect.appendChild(option);
        });
      })
    .catch(error => console.error('Error loading sectors:', error));
  }

  roleSelect.addEventListener("change", toggleFields);
  unitSelect.addEventListener("change", toggleFields);

  setTimeout(() => {
    toggleFields();
  }, 100);
});

</script>